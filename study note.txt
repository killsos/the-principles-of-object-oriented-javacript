The Principles of object-oriented javascript

javascript 面向对象精要

1 原始类型与引用类型

  JavaScript类型分为原始类型和引用类型
  原始类型保存简单数据值
  引用类型保存对象,其本质是指向内存位置的引用

  而其他编程语言用栈存储原始类型,用堆存储引用类型

  javascript原始类型的变量直接保存原始值（而不是一个指向对象的指针）
  当你将原始值赋给一个变量时,该值将被复制到变量中

  鉴别原始类型方法:typeof
  string number boolean undefined

  typeof null // object

  判断一个值是否为null的方法
  用 ===

  引用类型
  引用值是引用类型的实例,也是对象的同义词
  对象是属性的无序列表

  javascript中函数其实是引用值,除了函数可以运行以外,一个包含数组的属性和一个函数的属性
  没有区别

  创建对象
  var obj = new Object();

  根据命名规范:构造函数用首字母大写来跟非构造函数进行区分

  obj变量实际上并不包含对象的实例,而是一个指向内存中实际对象所在位置的指针(引用)

  当你讲一个对象赋值给变量时,实际是赋值给这个变量的指针,这意味着将一个变量赋值给另一个变量时
  两个变量各获得了一份指针的拷贝,指向内存中的同一个对象

  对象引用解除
  obj = null;

  javascript内建类型实例化
  Array
  Date
  Error
  Function
  Object
  RegExp

  ES5
  Array.isArray()


  javascript中原始封装类型string number boolean

  var name = “this is javascript”;
  var firstChar = name.chatAt(0);

  原理：
  var name = “this is javascript”;
  var temp = new String(name);
  var firstChar = temp.chatAt(0);
  temp = null;

  临时对象仅在值被读取时被创建

  函数
  函数其实就是对象
  使函数不同于其他对象的决定性特定是函数存在一个被称为[[call]]的内部属性
  内部属性无法通过代码访问而是定义了代码执行时的行为

  ECMAscript为javascript的对象定义了多种内部属性,这些内部属性都用双重中括号来标注

  [[call]]属性是函数独有的,表明该对象可以被执行,由于仅函数拥有该属性
  ECMAscript定义typeof操作符对任何具有[[call]]属性的对象返回function

  函数声明与函数表达式

  函数声明,以function关键字开始,函数名,{函数内容}

  function FN (){}

  函数表达式 无法函数名称之为匿名函数 因为函数对象本身没有名字取而代之的函数表达式通常
  会被一个变量或属性引用

  var add = function Fn(){}

  函数声明会hoist 函数表达式没有hoist

  函数就是值

  函数参数实际上被保存在一个被称之为arguments的对象

  函数重载 如果函数重名会被覆盖

  this对象
  JavaScript所有的函数作用域内都有一个this对象代表调用该函数的对象
  在全局作用域中this代表全局对象
  当一个函数作为对象的方法被调用时,默认this的值等于那个对象

  改变this对象
  在javascript中,使用和操作函数中this的能力是良好的面向对象编程的关键
  call
  apply  第二个参数arguments对象
  bind   返回一个绑定完成的call函数   es5新添加的


  理解对象
  当一个属性第一次被添加给对象时,javascript在对象上调用一个名为[[put]]的内部方法
  [[put]]方法会在对象上创建一个新节点来保存属性
  调用[[put]]的结果是在对象上创建了一个自有属性,一个自有属性表明仅仅该指定的对象实例
  拥有该属性,该属性被直接保存内实例内,对该属性的所有操作都必须通过该对象进行

  自有属性区别原型属性

  当一个已有的属性被赋予一个新值时,调用的是一个名为[[set]]的方法,该方法将属性的当前值
  替换为新值

  属性探测
  in操作符在给定对象中查找一个给定名称的属性  自有属性和原型属性都可以查找

  hasOwnProperty 自有属性

  删除属性
  delete操作符 删除 单个对象属性调用名[[delete]]的内部方法

  属性枚举
  [[Enumerable]] 设为true

  forin 枚举一个对象所有的可枚举的属性   遍历自有属性和原型属性

  Object.keys()  es5新添加的 返回可枚举属性的名字的数组   自有属性

  对象的PropertyIsEnumberable()方法可以判断一个属性是否可枚举

  属性类型
  数据属性和访问器属性
  数据属性包含一个值
  访问器属性不包含值而是定义了一个当属性被读取时调用的函数成为getter
  一个当属性被写入时调用的函数称为setter
  访问器属性仅需要getter或setter两者中的任意一个,当然也可以两者都有

  
