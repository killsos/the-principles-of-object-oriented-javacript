The Principles of object-oriented javascript

javascript 面向对象精要

1 原始类型与引用类型

  JavaScript类型分为原始类型和引用类型
  原始类型保存简单数据值
  引用类型保存对象,其本质是指向内存位置的引用

  而其他编程语言用栈存储原始类型,用堆存储引用类型

  javascript原始类型的变量直接保存原始值（而不是一个指向对象的指针）
  当你将原始值赋给一个变量时,该值将被复制到变量中

  鉴别原始类型方法:typeof
  string number boolean undefined

  typeof null // object

  判断一个值是否为null的方法
  用 ===

  引用类型
  引用值是引用类型的实例,也是对象的同义词
  对象是属性的无序列表

  javascript中函数其实是引用值,除了函数可以运行以外,一个包含数组的属性和一个函数的属性
  没有区别

  创建对象
  var obj = new Object();

  根据命名规范:构造函数用首字母大写来跟非构造函数进行区分

  obj变量实际上并不包含对象的实例,而是一个指向内存中实际对象所在位置的指针(引用)

  当你讲一个对象赋值给变量时,实际是赋值给这个变量的指针,这意味着将一个变量赋值给另一个变量时
  两个变量各获得了一份指针的拷贝,指向内存中的同一个对象

  对象引用解除
  obj = null;

  javascript内建类型实例化
  Array
  Date
  Error
  Function
  Object
  RegExp

  ES5
  Array.isArray()


  javascript中原始封装类型string number boolean

  var name = “this is javascript”;
  var firstChar = name.chatAt(0);

  原理：
  var name = “this is javascript”;
  var temp = new String(name);
  var firstChar = temp.chatAt(0);
  temp = null;

  临时对象仅在值被读取时被创建

  函数
  函数其实就是对象
  使函数不同于其他对象的决定性特定是函数存在一个被称为[[call]]的内部属性
  内部属性无法通过代码访问而是定义了代码执行时的行为

  ECMAscript为javascript的对象定义了多种内部属性,这些内部属性都用双重中括号来标注

  [[call]]属性是函数独有的,表明该对象可以被执行,由于仅函数拥有该属性
  ECMAscript定义typeof操作符对任何具有[[call]]属性的对象返回function

  函数声明与函数表达式

  函数声明,以function关键字开始,函数名,{函数内容}
  
  function FN (){}

  函数表达式 无法函数名称之为匿名函数 因为函数对象本身没有名字取而代之的函数表达式通常
  会被一个变量或属性引用

  var add = function Fn(){}
